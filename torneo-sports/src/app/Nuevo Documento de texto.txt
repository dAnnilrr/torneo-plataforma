'use client'

import { useState } from "react";
import { registrarEquipo } from "@/lib/supabaseClient";

const USUARIO_ADMIN = "admin";
const PASSWORD_ADMIN = "12345"; // ⚠️ Solo para pruebas, en producción usar Supabase Auth

export default function RegistroEquipos() {
  const [logueado, setLogueado] = useState(false);
  const [usuario, setUsuario] = useState("");
  const [password, setPassword] = useState("");
  const [nombre, setNombre] = useState("");
  const [categoria, setCategoria] = useState<"prepa" | "profesional">("prepa");
  const [genero, setGenero] = useState<"varonil" | "femenil">("varonil");
  const [mensaje, setMensaje] = useState("");

  // Manejar login simple
  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    if(usuario === USUARIO_ADMIN && password === PASSWORD_ADMIN){
      setLogueado(true);
      setMensaje("");
    } else {
      setMensaje("Usuario o contraseña incorrectos");
    }
  }

  // Manejar registro de equipo
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await registrarEquipo(nombre, categoria, genero);
      setMensaje(`Equipo "${nombre}" registrado correctamente`);
      setNombre("");
    } catch (error) {
      console.error(error);
      setMensaje("Ocurrió un error al registrar el equipo");
    }
  }

  // Si no está logueado, mostrar formulario de login
  if(!logueado){
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100 p-6">
        <h1 className="text-2xl font-bold mb-6">Login Admin</h1>
        <form onSubmit={handleLogin} className="bg-white p-6 rounded shadow-md w-full max-w-md flex flex-col gap-4">
          <input type="text" placeholder="Usuario" value={usuario} onChange={e => setUsuario(e.target.value)} className="p-2 border rounded"/>
          <input type="password" placeholder="Contraseña" value={password} onChange={e => setPassword(e.target.value)} className="p-2 border rounded"/>
          <button type="submit" className="bg-blue-600 text-white p-2 rounded hover:bg-blue-700">Ingresar</button>
          {mensaje && <p className="text-red-500">{mensaje}</p>}
        </form>
      </div>
    )
  }

  // Si está logueado, mostrar formulario de registro de equipo
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100 p-6">
      <h1 className="text-2xl font-bold mb-6">Registrar Equipo</h1>
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded shadow-md w-full max-w-md flex flex-col gap-4">
        <input type="text" placeholder="Nombre del Equipo" value={nombre} onChange={e => setNombre(e.target.value)} className="p-2 border rounded" required/>
        <select value={categoria} onChange={e => setCategoria(e.target.value as "prepa" | "profesional")} className="p-2 border rounded">
          <option value="prepa">Prepa</option>
          <option value="profesional">Profesional</option>
        </select>
        <select value={genero} onChange={e => setGenero(e.target.value as "varonil" | "femenil")} className="p-2 border rounded">
          <option value="varonil">Varonil</option>
          <option value="femenil">Femenil</option>
        </select>
        <button type="submit" className="bg-blue-600 text-white p-2 rounded hover:bg-blue-700">Registrar Equipo</button>
      </form>
      {mensaje && <p className="mt-4">{mensaje}</p>}
    </div>
  )
}
